;; Autogenerated

(defconst stellaris-triggers
  '(#("text" 0 1
    (:kind "trigger"
    :scopes "???"
    :targets ""
    :desc "Shows custom text"))
#("custom_tooltip" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets ""
  :desc "Shows a custom tooltip for the effects within"))
#("if" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets ""
  :desc "A conditional trigger"))
#("and" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "All inside trigger must be true"))
#("or" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "At least one entry inside trigger must be true"))
#("not" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Negates content of trigger"))
#("happiness" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets ""
  :desc "Compares pop happiness"))
#("has_ring" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has a ring or not (bool)"))
#("hidden_trigger" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Hides the tooltip for the effects within"))
#("has_owner" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is colonized"))
#("any_owned_planet" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches Scope to and goes through each owned planet"))
#("any_controlled_planet" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches scope to and goes through each controlled planets"))
#("is_ai" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country is AI controlled"))
#("always" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets ""
  :desc "Either always false or true"))
#("has_trait" 0 1
  (:kind "trigger"
  :scopes "country pop"
  :targets ""
  :desc "Checks if an empire's dominant species, pop, or leader has a certain Trait"))
#("has_ethic" 0 1
  (:kind "trigger"
  :scopes "country pop"
  :targets ""
  :desc "Checks if an empire's dominant species has a certain Ethic"))
#("is_moon" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is a moon"))
#("opinion" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Checks this country's opinion value of target country"))
#("any_pop" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches scope to and goes through each pop unit on the planet or all pops of the scope species"))
#("is_owned_by" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a planet or galactic object is owned by target empire"))
#("is_same_species" 0 1
  (:kind "trigger"
  :scopes "country pop"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a pop or empire is of the same species as another pop or empire"))
#("any_war_defender" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches scope to and goes through each defender in the war against a specified enemy"))
#("any_war_attacker" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches scope to and goes through each attacker in the war against a specified enemy"))
#("ideal_planet_class" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks the ideal planet class of a target country"))
#("is_same_empire" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if an empire is the same as another"))
#("is_planet_class" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a planet is of a certain class"))
#("has_strategic_resource" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a planet has a specific strategic resource"))
#("is_star_class" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a planet star is of a certain class"))
#("distance" 0 1
  (:kind "trigger"
  :scopes "fleet planet pop ship"
  :targets "none"
  :desc "Compares the min/max distance to a target with a value"))
#("has_technology" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country has a technology of atleast a specific level"))
#("has_planet_modifier" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has a planet modifier"))
#("has_planet_flag" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has a specified flag"))
#("has_country_flag" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country has a specified flag"))
#("has_fleet_flag" 0 1
  (:kind "trigger"
  :scopes "fleet"
  :targets ""
  :desc "Checks if a fleet has a specified flag"))
#("has_ship_flag" 0 1
  (:kind "trigger"
  :scopes "ship"
  :targets ""
  :desc "Checks if a planet has a specified flag"))
#("is_ship_class" 0 1
  (:kind "trigger"
  :scopes "fleet ship"
  :targets ""
  :desc "Checks if a ship is a specified class"))
#("is_ship_size" 0 1
  (:kind "trigger"
  :scopes "fleet ship"
  :targets ""
  :desc "Checks if a ship is a specified size"))
#("is_capital" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is its owners capital"))
#("has_ground_combat" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has ground combat"))
#("is_at_war" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country is at war"))
#("num_owned_planets" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the number of owned planets in a country with a value"))
#("has_government" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country has a specified government"))
#("num_pops" 0 1
  (:kind "trigger"
  :scopes "country planet"
  :targets "none"
  :desc "Compares the number of planets on a planet with a value"))
#("is_primitive" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country is primitive (bool)"))
#("is_inside_nebula" 0 1
  (:kind "trigger"
  :scopes "fleet planet ship"
  :targets "none"
  :desc "Checks if a planet/ship is inside a nebula"))
#("is_pirate" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country is a pirate country (bool)"))
#("is_inside_border" 0 1
  (:kind "trigger"
  :scopes "fleet planet ship"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a planet/ship/fleet is inside the border of the specified country"))
#("any_country" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Trigger Scope for any country"))
#("planet_size" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "??? none"
  :desc "Compares the planet size"))
#("any_planet" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any planet in a solar system"))
#("influence" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks country influence"))
#("is_star" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is a star"))
#("is_asteroid" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is an asteroid"))
#("is_at_war_with" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if an empire is at war with another empire"))
#("their_opinion" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Checks target country's opinion value of this country"))
#("is_same_species_class" 0 1
  (:kind "trigger"
  :scopes "country pop"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a pop or empire is of the same species class as another pop or empire"))
#("has_alliance" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country is in an alliance (bool)"))
#("has_federation" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country is in an federation (bool)"))
#("is_colonizable" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is colonizable (bool)"))
#("gender" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "???"
  :desc "Checks the gender of a leader"))
#("has_level" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "???"
  :desc "Checks if leader has at least specified level of specified skill"))
#("num_minerals" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Compares the number of minerals on a planet with a value"))
#("num_physics" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Compares the number of physics resources on a planet with a value"))
#("num_society" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Compares the number of society resources on a planet with a value"))
#("num_engineering" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Compares the number of engineering resources on a planet with a value"))
#("num_modifiers" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Compares the number of modifiers on a planet with a value"))
#("has_any_strategic_resource" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks whether a planet has any strategic resource (bool)"))
#("free_leader_slots" 0 1
  (:kind "trigger"
  :scopes "country fleet planet pop ship"
  :targets "none"
  :desc "Compares the number of free leader slots"))
#("has_pop_flag" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets ""
  :desc "Checks if a pop has a specified flag"))
#("is_occupied_flag" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is under military occupation"))
#("can_colonize" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is colonizable by a country's founder species"))
#("is_damaged" 0 1
  (:kind "trigger"
  :scopes "ship"
  :targets ""
  :desc "Checks if a ship is damaged"))
#("has_hp" 0 1
  (:kind "trigger"
  :scopes "ship"
  :targets ""
  :desc "Compares the hit points of a ship with a value"))
#("is_surveyed" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet/system as been survey by specified country"))
#("has_global_flag" 0 1
  (:kind "trigger"
  :scopes "country fleet planet pop ship"
  :targets "none"
  :desc "Checks a global trigger"))
#("check_variable" 0 1
  (:kind "trigger"
  :scopes "country fleet planet"
  :targets "none"
  :desc "Compares the variable value"))
#("any_planet_within_border" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches Scope to and goes through each random planet within border"))
#("any_owned_ship" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any ship owned by a country"))
#("any_ship" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any ship in the game"))
#("energy" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks for country energy"))
#("pop_has_ethic" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets ""
  :desc "Checks if a pop has a certain Ethic"))
#("pop_has_trait" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets ""
  :desc "Checks if a pop has a certain trait"))
#("is_colony" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is a colony"))
#("habitability" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks for species habitability on current planet"))
#("has_building" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet or tile has a building"))
#("is_controlled_by" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a planet is controlled by a certain country"))
#("is_terraformed" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has ever been terraformed"))
#("is_terraforming" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is being terraformed right now"))
#("has_planet_edict" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has an edict"))
#("has_country_edict" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country has an edict"))
#("has_observation_outpost" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has an observation outpost"))
#("is_federation_leader" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country is a federation leader"))
#("starting_system" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Checks if a system is the starting system for an empire"))
#("has_star_flag" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Checks if a star has a specified flag"))
#("has_mining_station" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has a mining station"))
#("has_research_station" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has a research station"))
#("has_spaceport" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has a spaceport"))
#("any_spaceport" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any spaceport trigger"))
#("any_research_station" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any research station outpost"))
#("any_mining_station" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any mining station outpost"))
#("any_system" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any system trigger"))
#("any_system_within_border" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any system within border trigger"))
#("army_type" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Checks what type an army type is"))
#("has_army" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has an army"))
#("is_advisor_active" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country has an advisor"))
#("count_pops" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Counts the amount of pops which fill a requirement and compare it to a number"))
#("is_enslaved" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets ""
  :desc "Checks if a pop is enslaved"))
#("is_being_purged" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets ""
  :desc "Checks if a pop is being exterminated"))
#("graphical_culture" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a country has specified graphical culture"))
#("income" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares country income."))
#("expenses" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares country expenses."))
#("produced_energy" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the amount of produced energy of a country."))
#("trade_income" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the previous months income from the trade of a country."))
#("trade_expenses" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the previous months expenses from the trade of a country."))
#("ship_maintenance" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the previous months ship maintenance of a country."))
#("army_maintenance" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the previous months army maintenance of a country."))
#("colony_maintenance" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the previous months colony maintenance of a country."))
#("station_maintenance" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the previous months station maintenance of a country."))
#("construction_expenses" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the previous months construction expenses of a country."))
#("federation_expenses" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the previous months federation expenses of a country."))
#("has_anomaly" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has a anomaly"))
#("stored_physics_points" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the amount of stored physics points a country has."))
#("stored_society_points" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the amount of stored society points a country has."))
#("stored_engineering_points" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the amount of stored engineering points a country has."))
#("balance" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares country balance."))
#("running_balance" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares country running balance."))
#("is_planet" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a planet is of the same as the scope"))
#("is_pop" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a pop is of the same as the scope"))
#("is_ship" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a ship is of the same as the scope"))
#("is_army" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if an army is of the same as the scope"))
#("is_country" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a country is of the same as the scope"))
#("is_tutorial_level" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the tutorial level of the player of a country."))
#("is_multiplayer" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets ""
  :desc "Checks if the game is running in multiplayer"))
#("has_event_chain" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if the country has an event chain"))
#("is_species_class" 0 1
  (:kind "trigger"
  :scopes "country pop"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if the founder species of a country, or a pop is of a specific species"))
#("vassals" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Compares the number of vassals"))
#("has_opinion_modifier" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if the country has an opinion modifier"))
#("has_established_contact" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if the country has contact with another country."))
#("has_completed_event_chain_counter" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if the country has completed counter in event chain."))
#("has_planet_class" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a star has planet of certain class"))
#("is_disabled" 0 1
  (:kind "trigger"
  :scopes "fleet ship"
  :targets "???"
  :desc "Checks if a ship or fleet is disabled"))
#("has_existing_ship_design" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a country has a specific ship design"))
#("has_grown_pop" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "??? none"
  :desc "Checks if a planet or tile has a grown pop"))
#("has_growing_pop" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "??? none"
  :desc "Checks if a planet or tile has a growing pop"))
#("has_resource" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "??? none"
  :desc "Compares the resources of planet or tile."))
#("has_building_construction" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet or tile has a building construction"))
#("any_neighboring_tile" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches scope to and goes through each neighboring tile"))
#("any_tile" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches scope to and goes through each tile"))
#("has_blocker" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet or tile has a blocker"))
#("free_pop_tiles" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "??? none"
  :desc "Compares a value with the amount of free tiles for pops"))
#("free_building_tiles" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "??? none"
  :desc "Compares a value with the amount of free tiles for buildings"))
#("has_relation_flag" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Checks for relation flags"))
#("reverse_has_relation_flag" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Checks for reverse relation flags"))
#("exists" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "???"
  :desc "Checks for object existance"))
#("has_edict" 0 1
  (:kind "trigger"
  :scopes "country planet"
  :targets "??? none"
  :desc "Checks if a planet or country has an edict activated"))
#("has_moon" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has a moon"))
#("num_moons" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Compares number of moons of planet."))
#("is_in_cluster" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "??? none"
  :desc "Checks if a galactic object belongs to a cluster"))
#("any_moon" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any moon trigger"))
#("num_adjacent_tiles" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Adjacent tiles with a value"))
#("is_sentient" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets ""
  :desc "Checks if a pop is sentient"))
#("leader_class" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a leader is a specific type"))
#("is_preventing_anomaly" 0 1
  (:kind "trigger"
  :scopes "country fleet planet pop ship"
  :targets "none"
  :desc "Checks if a planet is currently preventing anomalies"))
#("observation_outpost_owner" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Owner of an observation outpost"))
#("observation_outpost" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Observation outpost"))
#("has_deposit" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a tile/planet has a deposit"))
#("has_deposit_for" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a tile has a deposit for specific ship class"))
#("colony_age" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Colony age in months compared with a value"))
#("is_rim_system" 0 1
  (:kind "trigger"
  :scopes "country fleet planet pop ship"
  :targets "none owner"
  :desc "Checks if a system is on the galactic rim"))
#("any_rim_system" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches scope to and goes through each rim system"))
#("has_mission" 0 1
  (:kind "trigger"
  :scopes "fleet"
  :targets ""
  :desc "Checks if a fleet has a certain mission"))
#("is_country_type" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if country is of specified type"))
#("has_modifier" 0 1
  (:kind "trigger"
  :scopes "country planet pop"
  :targets "none"
  :desc "Checks if scope object has a modifier"))
#("switch" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "???"
  :desc "Switches between scopes"))
#("sectors" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares number of sectors"))
#("num_fleets" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Checks if a country has the said number of fleets"))
#("num_ships" 0 1
  (:kind "trigger"
  :scopes "country fleet"
  :targets "???"
  :desc "Checks if a country has the said number of ships"))
#("any_ship_in_system" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any ship in system"))
#("mission_progress" 0 1
  (:kind "trigger"
  :scopes "fleet"
  :targets ""
  :desc "Checks if a mission has a certain progress"))
#("num_ethics" 0 1
  (:kind "trigger"
  :scopes "country pop"
  :targets ""
  :desc "Compares the number of ethics with a value"))
#("num_traits" 0 1
  (:kind "trigger"
  :scopes "country pop"
  :targets ""
  :desc "Compares the number of traits with a value"))
#("has_truce" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country has truce with certain country"))
#("has_access_military" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "???"
  :desc "Checks if a country has military access to a system"))
#("has_access_civilian" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "???"
  :desc "Checks if a country has civilian access to a system"))
#("has_access_construction" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "???"
  :desc "Checks if a country has constraction access to a system"))
#("is_ringworld" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is a ringworld"))
#("member_of_faction" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if pop is a member of a faction ( targets yes/no/specific faction )"))
#("support" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Compares the relative support of a pop faction"))
#("is_ideal_planet_class" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is of ideal class for country"))
#("is_pop_faction_type" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if pop faction is specific type"))
#("is_same_value" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if two scopes have the same value"))
#("sector_controlled" 0 1
  (:kind "trigger"
  :scopes "fleet planet"
  :targets "none"
  :desc "Checks if the planet/fleet is controlled by the sector"))
#("sectors_over_limit" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares number of sectors over the limit"))
#("is_orbital_tile" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Checks if a tile is the tile that stations collect from"))
#("orbital_bombardment" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks the orbital bombardment status of a planet"))
#("intel_level" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if scope-country has intel level </>/= [level] in [system] ( intel_level = { level > low system = FROMFROM } )"))
#("members" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Compares the number of alliance members"))
#("is_researching_area" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a leader is researching a specific area"))
#("any_owned_leader" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches Scope to and goes through each owned leader"))
#("any_owned_pop" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches scope to and goes through each pop unit on the planet or all pops of the scope species"))
#("has_faction" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if an empire has a certain faction type"))
#("count_owned_pops" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Counts the amount of pops which fill a requirement and compare it to a number"))
#("can_declare_war" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if we can declare war against a target"))
#("is_hostile" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if country is hostile against a target"))
#("has_communications" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if country has communication with another country"))
#("has_country_resource" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Compares the stored resources of a country."))
#("has_leader_flag" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Checks if a leader has a specified flag"))
#("num_killed_ships" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Compares how many ships scope country has killed of [target]"))
#("num_taken_planets" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Compares how many planets scope country has taken from [target]"))
#("count_ships" 0 1
  (:kind "trigger"
  :scopes "fleet"
  :targets "???"
  :desc "Compares number of ships in a fleet that matches the [limit = {..}]"))
#("count_owned_ships" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Compares number of ships in a country that matches the [limit = {..}]"))
#("has_pop_faction_flag" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets ""
  :desc "Checks if a pop faction has a specified flag"))
#("research_leader" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches Scope to and goes to research leader"))
#("leader_of_faction" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if leader is the leader of a faction ( targets yes/no/specific faction )"))
#("is_scope_valid" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets ""
  :desc "Checks if the current scope is valid"))
#("opposing_ethics_divergence" 0 1
  (:kind "trigger"
  :scopes "country pop"
  :targets "???"
  :desc "Compares the opposing ethics divergence."))
#("is_war_leader" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if country is war leader"))
#("can_create_sector" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "owner"
  :desc "Checks if a sector can be created on the targeted planet"))
#("is_in_alliance_with" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if country is in an alliance with target country"))
#("is_in_federation_with" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if country is in a federation with target country"))
#("can_change_policy" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Checks if a country can change anything with a policy"))
#("count_pop_factions" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Counts the amount of pop factions which fill a requirement and compare it to a number"))
#("has_fleet_order" 0 1
  (:kind "trigger"
  :scopes "fleet ship"
  :targets ""
  :desc "Checks if a ship or a fleet has a fleet order"))
#("closest_system" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "???"
  :desc "Switches scope to closest system that passes limit"))
#("num_communications" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares the number of planets on a planet with a value"))
#("is_ironman" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets ""
  :desc "Check if current game is ironman."))
#("has_monthly_income" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Checks monthly income of resource compared against specific value"))
#("last_changed_policy" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Checks the last changed policy of a country against specified policy"))
#("any_sector" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches scope to and goes through each sector of a country"))
#("has_policy_flag" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country has a policy"))
#("any_owned_fleet" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any fleet owned by a country"))
#("count_deposits" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "??? none"
  :desc "Counts number of deposits of given type on planet or tile"))
#("has_ground_support_stance" 0 1
  (:kind "trigger"
  :scopes "fleet"
  :targets ""
  :desc "Checks if a fleet has a certain bombardment stance"))
#("has_tech_option" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country has a technology option"))
#("is_species" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if the founder species of a country, or a pop is of a specific species"))
#("count_tech_options" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Compares the amount of tech options a country has against a value, can specify which area"))
#("last_increased_tech" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Compares against the last increased tech of a country"))
#("has_country_strategic_resource" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Compares the resources of a country."))
#("has_point_of_interest" 0 1
  (:kind "trigger"
  :scopes "country planet ship"
  :targets "??? none"
  :desc "Checks if the scope location has a point of interest"))
#("is_being_repaired" 0 1
  (:kind "trigger"
  :scopes "fleet ship"
  :targets ""
  :desc "Checks if a fleet or ship is being repaired"))
#("any_war" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches Scope to any war"))
#("any_defender" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches Scope to any defender in the war"))
#("any_attacker" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Switches Scope to any attacker in the war"))
#("has_orbital_station" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet has an orbital station"))
#("any_orbital_station" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "capital controller from fromfrom none owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any orbital station"))
#("has_prev_building" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Checks if a tile previously had a building (only latest building)"))
#("any_ambient_object" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any ambient object trigger"))
#("any_system_ambient_object" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any system ambient object trigger"))
#("has_ambient_object_flag" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Checks if an ambient object has a specified flag"))
#("war_demand_counter" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets ""
  :desc "Compares a war demand trigger"))
#("attacker_war_score" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "???"
  :desc "Checks the war score of the attackers in a war"))
#("defender_war_score" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "???"
  :desc "Checks the war score of the defenders in a war"))
#("off_war_score_sum" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Checks the sum of war score in all offensive wars"))
#("def_war_score_sum" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Checks the sum of war score in all defensive wars"))
#("any_bordering_country" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any bordering country"))
#("galaxy_percentage" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Checks if the scope owns systems corresponding to a certain galaxy percentage"))
#("custom_tooltip_fail" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets ""
  :desc "Shows custom text when trigger is failing"))
#("count_armies" 0 1
  (:kind "trigger"
  :scopes "country planet"
  :targets "none"
  :desc "Counts the amount of armies which fill a requirement and compare it to a number"))
#("original_owner" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is still owned by first colonizer"))
#("is_in_combat" 0 1
  (:kind "trigger"
  :scopes "fleet ship"
  :targets ""
  :desc "Checks if a fleet or ship is being repaired"))
#("any_member" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Any member in an alliance"))
#("is_guaranteeing" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if scope country is guaranteeing target country"))
#("is_war_participant" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Checks if a country is participating in scope war"))
#("is_homeworld" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is its owners homeworld"))
#("years_passed" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets ""
  :desc "Compares the number of years that have passed since game start with a value"))
#("is_threatened_to" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is threatened by target country"))
#("is_protective_to" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is protective of target country"))
#("is_friendly_to" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is friendly to target country"))
#("is_hostile_to" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is hostile to target country"))
#("is_ruined" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Checks if a building is ruined or not"))
#("is_dismissive_to" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is dismissive of target country"))
#("is_patronizing_to" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is patronizing to target country"))
#("is_angry_to" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is angry at target country"))
#("is_neighbor_of" 0 1
  (:kind "trigger"
  :scopes "country planet"
  :targets "none"
  :desc "Checks if country is neighbors with target"))
#("any_neighbor_country" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Trigger Scope for any neighboring country"))
#("is_rival" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is a rival of target country"))
#("is_unfriendly_to" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is unfriendly to target country"))
#("is_loyal_to" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is loyal to target country"))
#("is_disloyal_to" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is disloyal to target country"))
#("is_cordial_to" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is cordial to target country"))
#("is_domineering_to" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is domineering towards target country"))
#("is_wary_to" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Attitude check, if country is wary of target country"))
#("fleet_power" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks country fleet power"))
#("has_election_type" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country has a specified election type"))
#("has_ai_personality" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if an Empire has a certain personality type"))
#("has_ai_personality_type" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if an Empire has a certain personality type"))
#("has_ai_personality_behaviour" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if an Empire has a certain personality behaviour"))
#("has_valid_ai_personality" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country has a valid ai"))
#("has_migration_access" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if scope country has migration access to target country"))
#("grants_migration_access" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country grants migration access to anyone"))
#("logged_in_to_pdx_account" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "???"
  :desc "Checks if the local human is logged in to a Pdx account. This WILL cause an out of sync if used for anything that can change the game state"))
#("tech_unlocked_ratio" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Ratio of tech between this and from"))
#("has_special_project" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country has a special project available"))
#("would_join_war" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks if a country would join the side of a certain country in a hypothetical war"))
#("can_be_subject" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Checks if country can be subject of 'subject_type' under 'overlord'"))
#("Supported Scopes: ???\n\nSupported targets:\n\nhas_skill" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Checks level of skill for a leader"))
#("has_experience" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Checks amount of experience for a leader"))
#("any_neighbor_system" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Trigger Scope for any neighboring system"))
#("is_under_colonization" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks if a planet is being colonized (bool)"))
#("has_colony_progress" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "none"
  :desc "Checks progress of establishing a colony on planet"))
#("is_growing" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets ""
  :desc "Checks if a pop is growing"))
#("is_colony_pop" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets ""
  :desc "Checks if a pop is a colony pop"))
#("is_subspecies" 0 1
  (:kind "trigger"
  :scopes "country pop"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a pop or empire is a subspecies of the same species as another pop or empire"))
#("is_valid" 0 1
  (:kind "trigger"
  :scopes "country planet"
  :targets "??? none"
  :desc "Checks to see if the target of a scope is valid"))
#("fortification_health" 0 1
  (:kind "trigger"
  :scopes "planet"
  :targets "??? none"
  :desc "Compares a value with fortification health percentage"))
#("subject_can_diplomacy" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if we are allowed by our overlord to do certain diplomatic actions"))
#("has_surveyed_class" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Checks a country has surveyed planet class trigger"))
#("fleet_size" 0 1
  (:kind "trigger"
  :scopes "fleet"
  :targets ""
  :desc "Checks fleet size"))
#("check_pop_faction_parameter" 0 1
  (:kind "trigger"
  :scopes ""
  :targets ""
  :desc "Compares a pop faction parameter against a value"))
#("is_robot_pop" 0 1
  (:kind "trigger"
  :scopes "pop"
  :targets ""
  :desc "Checks if the pop is of a robotic species class."))
#("host_has_dlc" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "???"
  :desc "Checks if the host has a certain dlc enabled"))
#("local_has_dlc" 0 1
  (:kind "trigger"
  :scopes "???"
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if the host has a certain dlc enabled"))
#("num_rare_techs" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets ""
  :desc "Compares number of researched rare technologies"))
#("is_core_sector" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "???"
  :desc "Checks if the current sector is the country's core sector"))
#("has_mandate" 0 1
  (:kind "trigger"
  :scopes ""
  :targets "capital controller from fromfrom owner prev prevprev prevprevprev prevprevprevprev random root this"
  :desc "Checks if a leader has mandate <yes/no/mandate_key>"))
#("has_spaceport_module" 0 1
  (:kind "trigger"
  :scopes "fleet planet"
  :targets "none"
  :desc "Checks if a spaceport has a module upgrade"))
#("has_free_spaceport_module_slot" 0 1
  (:kind "trigger"
  :scopes "fleet planet"
  :targets "none"
  :desc "Checks if a spaceport has a free module slot"))
#("is_spaceport_module_slot_free" 0 1
  (:kind "trigger"
  :scopes "fleet planet"
  :targets "none"
  :desc "Checks if a specific spaceport module slot is free"))
#("can_build_spaceport_module" 0 1
  (:kind "trigger"
  :scopes "fleet planet"
  :targets "none"
  :desc "Checks if a spaceport is allowed to build a specific module upgrade"))
#("num_free_spaceport_module_slots" 0 1
  (:kind "trigger"
  :scopes "fleet planet"
  :targets "none"
  :desc "Compares the parameter to the amount of free spaceport module slots"))
#("num_spaceport_modules" 0 1
  (:kind "trigger"
  :scopes "fleet planet"
  :targets "none"
  :desc "Compares the parameter to the amount of spaceport modules"))
#("species_portrait" 0 1
  (:kind "trigger"
  :scopes "country pop"
  :targets ""
  :desc "Checks if a species uses a certain portrait."))
#("num_armies" 0 1
  (:kind "trigger"
  :scopes "country"
  :targets "???"
  :desc "Checks if a country has the said number of armies"))
#("is_proposing_war_demands" 0 1
  (:kind "trigger"
  :scopes "country fleet planet pop ship"
  :targets "??? none"
  :desc "Checks if currently proposing wardemands or handling existing wardemands"))
)
  )

(defconst stellaris-effects
'(#("tooltip" 0 1
    (:kind "effect"
    :scopes "country planet pop ship"
    :targets "??? none"
    :desc "Just a tooltip"))
#("hidden_effect" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Effect not shown in tooltips"))
#("custom_tooltip" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Just a tooltip"))
#("if" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "A conditional effect"))
#("country_event" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Fires a Country event"))
#("planet_event" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Fires a Planet event"))
#("random" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "A random effect"))
#("random_list" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "A random effect"))
#("every_owned_planet" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Switches Scope to and goes through all owned planets"))
#("random_owned_planet" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Picks a random owned planet"))
#("every_controlled_planet" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Switches Scope to and goes through all controlled planets"))
#("random_controlled_planet" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Picks a random controlled planet"))
#("create_ship_design" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Creates a new ship design"))
#("change_government" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Change government in Empire."))
#("ship_event" 0 1
  (:kind "effect"
  :scopes "ship"
  :targets ""
  :desc "Fires a Ship event"))
#("add_energy" 0 1
  (:kind "effect"
  :scopes "country"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Adds a sum of energy to a country"))
#("add_minerals" 0 1
  (:kind "effect"
  :scopes "country planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Adds Minerals to a planet, tile or country"))
#("add_physics" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Adds Physics resources to a planet"))
#("add_society" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Adds Society resources to a planet"))
#("add_engineering" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Adds Engineering resources to a planet"))
#("pop_event" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets ""
  :desc "Fires a Pop event"))
#("every_war_defender" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Switches Scope to and goes through all defenders in a war with a specified enemy"))
#("set_owner" 0 1
  (:kind "effect"
  :scopes "fleet planet"
  :targets "none"
  :desc "Sets the owner of a planet or fleet."))
#("every_war_attacker" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Switches Scope to and goes through all attackers in a war with a specified enemy"))
#("random_war_defender" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Switches Scope to and picks a random defender in a war with a specified enemy"))
#("random_war_attacker" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Switches Scope to and picks a random attacker in a war with a specified enemy"))
#("give_technology" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Gives a specific tech to an empire."))
#("enable_special_project" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Enables a special research project for a country"))
#("add_resource" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Adds a resource to a planet or tile"))
#("add_physics_research" 0 1
  (:kind "effect"
  :scopes "country"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Adds stored Physics research points to a county"))
#("add_society_research" 0 1
  (:kind "effect"
  :scopes "country"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Adds stored Society research points to a county"))
#("add_engineering_research" 0 1
  (:kind "effect"
  :scopes "country"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Adds stored Engineering research points to a county"))
#("set_country_flag" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Sets a flag on a country"))
#("set_planet_flag" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Sets a flag on a planet"))
#("set_fleet_flag" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets ""
  :desc "Sets a flag on a fleet"))
#("set_ship_flag" 0 1
  (:kind "effect"
  :scopes "ship"
  :targets ""
  :desc "Sets a flag on a ship"))
#("remove_country_flag" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Removes a flag from a country"))
#("remove_planet_flag" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Removes a flag from a planet"))
#("remove_fleet_flag" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets ""
  :desc "Removes a flag from a fleet"))
#("remove_ship_flag" 0 1
  (:kind "effect"
  :scopes "ship"
  :targets ""
  :desc "Removes a flag from a ship"))
#("every_owned_ship" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Switches Scope to and goes through all owned ships"))
#("random_owned_ship" 0 1
  (:kind "effect"
  :scopes "country fleet"
  :targets ""
  :desc "Picks a random owned ship"))
#("create_species" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Creates a new species"))
#("create_country" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Creates a new country"))
#("create_fleet" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Creates a new fleet"))
#("create_army" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Creates a new army"))
#("set_location" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets ""
  :desc "Sets the location of a fleet."))
#("create_ship" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets ""
  :desc "Creates a new ship"))
#("set_primitive" 0 1
  (:kind "effect"
  :scopes "country"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Sets primitive status for a country"))
#("create_pop" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Creates a new pop"))
#("create_colony" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Creates a colony"))
#("set_capital" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Sets planet to capital of a country"))
#("change_pc" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Change planet class of planet."))
#("random_country" 0 1
  (:kind "effect"
  :scopes "???"
  :targets "this"
  :desc "Picks a random country"))
#("random_pop" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Picks a random pop"))
#("kill_pop" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Kills pop"))
#("enslave_pop" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Enslave/Emancipate pop"))
#("destroy_colony" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Destroys the colony on the planet"))
#("every_system_planet" 0 1
  (:kind "effect"
  :scopes "star"
  :targets ""
  :desc "Switches Scope to planet and goes through all planets in the system"))
#("surveyed" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Sets a planet as surveyed by a specific country"))
#("add_experience" 0 1
  (:kind "effect"
  :scopes "leader"
  :targets ""
  :desc "Adds specified amount of experience to specified skill on scope leader"))
#("set_ring" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Adds or removes the ring around a planet"))
#("create_mining_station" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Creates a mining station"))
#("create_research_station" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Creates a research station"))
#("set_pop_flag" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets ""
  :desc "Sets a flag on a pop"))
#("remove_pop_flag" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets ""
  :desc "Removes a flag from a pop"))
#("every_owned_pop" 0 1
  (:kind "effect"
  :scopes "country planet"
  :targets "none"
  :desc "Switches scope to pop and goes through all pops on planet or in country"))
#("set_name" 0 1
  (:kind "effect"
  :scopes "country fleet leader planet ship star"
  :targets "none"
  :desc "Changes the name of a scope target"))
#("random_planet" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Executes on a random planet"))
#("add_modifier" 0 1
  (:kind "effect"
  :scopes "country fleet planet pop ship"
  :targets "none"
  :desc "Gives a specific modifier to a planet."))
#("create_leader" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Creates a new leader"))
#("fleet_event" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets ""
  :desc "Fires a Fleet event"))
#("reduce_hp" 0 1
  (:kind "effect"
  :scopes "ship"
  :targets ""
  :desc "Reduces the hitpoints of a ship by the points given"))
#("reduce_hp_percent" 0 1
  (:kind "effect"
  :scopes "ship"
  :targets ""
  :desc "Reduces the hitpoints of a ship by the percentage given"))
#("repair_ship" 0 1
  (:kind "effect"
  :scopes "ship"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Restores a damaged ship to its full HP"))
#("destroy_country" 0 1
  (:kind "effect"
  :scopes "country"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Removes a flag from a country"))
#("set_variable" 0 1
  (:kind "effect"
  :scopes "country fleet leader planet star"
  :targets "none"
  :desc "Sets a variable value"))
#("remove_global_flag" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Removes a flag from a country"))
#("set_global_flag" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Sets a global flag"))
#("change_variable" 0 1
  (:kind "effect"
  :scopes "country fleet leader planet star"
  :targets "none"
  :desc "Changes a variable value"))
#("random_planet_within_border" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Picks a random planet within country border"))
#("every_pop" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Fires a Pop event"))
#("every_country" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Fires a Country event"))
#("every_ship" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Fires a Ship event"))
#("every_planet" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Executes on every planet"))
#("add_influence" 0 1
  (:kind "effect"
  :scopes "country"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Adds influence to a county"))
#("pop_add_ethic" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets ""
  :desc "Adds an ethic to a pop"))
#("pop_remove_ethic" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets ""
  :desc "Removes an ethic to a pop"))
#("pop_migration" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets ""
  :desc "Sets the migration speed of a pop."))
#("change_pop_species" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets ""
  :desc "Changes the species of a pop."))
#("create_rebels" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Creates a new rebel country"))
#("cancel_terraformation" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Cancels terraformation on the planet"))
#("set_event_locked" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Locks a fleet actively disabling it to do anything. Remember to unlock."))
#("clear_orders" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Removes all orders from a fleet."))
#("order_forced_return" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Orders a fleet to move back into safe territory."))
#("declare_war" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Declare A War."))
#("set_star_flag" 0 1
  (:kind "effect"
  :scopes "star"
  :targets ""
  :desc "Sets a flag on a star"))
#("remove_star_flag" 0 1
  (:kind "effect"
  :scopes "star"
  :targets ""
  :desc "Removes a flag from a star"))
#("set_primitive_age" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Sets a primitive age on a country"))
#("spawn_system" 0 1
  (:kind "effect"
  :scopes "planet ship star"
  :targets "none"
  :desc "Spawns system with position relative to scope, parameters are system, min_distance(0), max_distance(100)"))
#("any_spaceport" 0 1
  (:kind "effect"
  :scopes "country planet"
  :targets "none"
  :desc "Picks any spaceport"))
#("any_research_station" 0 1
  (:kind "effect"
  :scopes "country planet"
  :targets "none"
  :desc "Picks any research station"))
#("any_mining_station" 0 1
  (:kind "effect"
  :scopes "country planet"
  :targets "none"
  :desc "Picks any mining station"))
#("random_research_station" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none this"
  :desc "Picks a random research station"))
#("dismantle" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Dismantles a station"))
#("random_mining_station" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none this"
  :desc "Picks a random mining station"))
#("random_spaceport" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none this"
  :desc "Picks a random spaceport"))
#("random_system" 0 1
  (:kind "effect"
  :scopes "???"
  :targets "this"
  :desc "Picks a random system"))
#("random_system_within_border" 0 1
  (:kind "effect"
  :scopes "country"
  :targets "this"
  :desc "Picks a random system within border"))
#("random_army" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Picks a random army"))
#("random_army_within_country" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Executes on a random army belonging to country"))
#("set_advisor_active" 0 1
  (:kind "effect"
  :scopes "country"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Activate or deactivate an advisor"))
#("save_event_target_as" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Save an event target"))
#("save_global_event_target_as" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Save a global event target"))
#("clear_global_event_target" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Clear a global event target"))
#("clear_global_event_targets" 0 1
  (:kind "effect"
  :scopes "???"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Clear all global event targets"))
#("break" 0 1
  (:kind "effect"
  :scopes "???"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Break execution of effects"))
#("set_tutorial_level" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Changes the tutorial level of a human of a country."))
#("begin_event_chain" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Begins an event chain."))
#("end_event_chain" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Ends an event chain."))
#("queue_actions" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets ""
  :desc "Add actions to fleet's action queue"))
#("while" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Repeats contained effects until limit fails or count is reached"))
#("clear_fleet_actions" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets ""
  :desc "Clears all fleet actions for fleet on the right side of ="))
#("destroy_fleet" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Destroys fleet on the right side of ="))
#("create_ambient_object" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Creates a new ambient object of type <type> at location <location>"))
#("destroy_ambient_object" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Destroys an ambient object"))
#("add_trait" 0 1
  (:kind "effect"
  :scopes "leader"
  :targets ""
  :desc "Adds a trait to a leader"))
#("remove_trait" 0 1
  (:kind "effect"
  :scopes "leader"
  :targets ""
  :desc "Removes a trait from a leader"))
#("modify_species" 0 1
  (:kind "effect"
  :scopes "country planet pop ship"
  :targets "none"
  :desc "Creates a new modified species"))
#("add_opinion_modifier" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Gives an opinion modifier to an empire."))
#("establish_contact" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Country establishes contact with another country."))
#("set_faction_hostility" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Sets hostility stance of a faction"))
#("random_system_planet" 0 1
  (:kind "effect"
  :scopes "star"
  :targets ""
  :desc "Picks a random planet within system"))
#("add_event_chain_counter" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Adds amount to event chain counter."))
#("add_anomaly" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Adds a specified anomaly to planet"))
#("set_disable_at_health" 0 1
  (:kind "effect"
  :scopes "ship"
  :targets ""
  :desc "Set the amount of health that a ship disables at"))
#("add_building_construction" 0 1
  (:kind "effect"
  :scopes ""
  :targets ""
  :desc "Adds a construction of specified building on tile."))
#("set_building" 0 1
  (:kind "effect"
  :scopes ""
  :targets ""
  :desc "Adds a construction of specified building on tile."))
#("remove_building" 0 1
  (:kind "effect"
  :scopes ""
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Removes building on tile."))
#("change_planet_size" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Adds/Removes onto the size of the planet."))
#("set_blocker" 0 1
  (:kind "effect"
  :scopes ""
  :targets ""
  :desc "Sets a specified blocker on tile."))
#("remove_blocker" 0 1
  (:kind "effect"
  :scopes ""
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Removes blocker from tile. (bool)"))
#("every_tile" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Executes on every tile on planet"))
#("random_tile" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Executes on a random tile on planet"))
#("every_neighboring_tile" 0 1
  (:kind "effect"
  :scopes ""
  :targets ""
  :desc "Executes on every neighboring tile on planet"))
#("random_neighboring_tile" 0 1
  (:kind "effect"
  :scopes ""
  :targets ""
  :desc "Executes on a random neighboring tile on planet"))
#("set_disabled" 0 1
  (:kind "effect"
  :scopes "ship"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Used to enable or disable a ship"))
#("create_point_of_interest" 0 1
  (:kind "effect"
  :scopes "country planet pop ship"
  :targets "none"
  :desc "Creates point of interest"))
#("remove_point_of_interest" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Removed point of interest."))
#("set_relation_flag" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Sets a relation flag."))
#("remove_relation_flag" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Removes a relation flag."))
#("random_moon" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Executes on all moons"))
#("every_moon" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Executes on all moons"))
#("every_system_in_cluster" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Switches scope and goes through all systems in a cluster"))
#("create_cluster" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Creates a cluster centered around the specified spatial object"))
#("kill_leader" 0 1
  (:kind "effect"
  :scopes "country fleet leader planet ship"
  :targets "none"
  :desc "Kills leaders of specified types. kill_leader = { type = general type = scientist etc. }"))
#("assign_leader" 0 1
  (:kind "effect"
  :scopes "country fleet"
  :targets ""
  :desc "Assigns a leader to either a fleet, army, or pop faction"))
#("country_add_ethic" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Adds an ethic to a country"))
#("country_remove_ethic" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Removes an ethic from a country"))
#("set_timed_country_flag" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Sets a timed flag on a country"))
#("set_timed_fleet_flag" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets ""
  :desc "Sets a timed flag on a fleet"))
#("set_timed_global_flag" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Sets a timed global flag"))
#("set_timed_planet_flag" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Sets a timed flag on a planet"))
#("set_timed_pop_flag" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets ""
  :desc "Sets a timed flag on a pop"))
#("set_timed_relation_flag" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Sets a timed relation flag"))
#("set_timed_ship_flag" 0 1
  (:kind "effect"
  :scopes "ship"
  :targets ""
  :desc "Sets a timed flag on a ship"))
#("set_timed_star_flag" 0 1
  (:kind "effect"
  :scopes "star"
  :targets ""
  :desc "Sets a timed flag on a star"))
#("remove_army" 0 1
  (:kind "effect"
  :scopes ""
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Removes scope army."))
#("prevent_anomaly" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Sets if this planet will generate new anomalies."))
#("every_planet_within_border" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Executes on every planet within country border"))
#("every_planet_army" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Picks every army"))
#("every_army_within_country" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Executes on all armies belonging to country"))
#("observation_outpost_owner" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none this"
  :desc "Picks the observation station owner"))
#("observation_outpost" 0 1
  (:kind "effect"
  :scopes "country planet"
  :targets "none"
  :desc "Picks the observation station"))
#("add_deposit" 0 1
  (:kind "effect"
  :scopes ""
  :targets ""
  :desc "Adds a deposit to a tile"))
#("clear_deposits" 0 1
  (:kind "effect"
  :scopes ""
  :targets ""
  :desc "Removes all deposits from a tile"))
#("every_rim_system" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Executes on every system on the galactic rim"))
#("random_rim_system" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Executes on a random system on the galactic rim"))
#("purge" 0 1
  (:kind "effect"
  :scopes "planet pop"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Starts/stops purging pops"))
#("set_planet_max_health" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Sets the maximum health of a planet"))
#("set_planet_health" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Sets the current health of a planet"))
#("remove_modifier" 0 1
  (:kind "effect"
  :scopes "country planet pop"
  :targets "none"
  :desc "Removes a specific modifier from a planet."))
#("set_country_type" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Changes country type"))
#("add_ship_design" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Adds a ship design to a country!"))
#("add_mission_progress" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Adds progress to a mission"))
#("create_army_transport" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets ""
  :desc "Creates a new army in space"))
#("set_spaceport_module" 0 1
  (:kind "effect"
  :scopes "fleet planet"
  :targets "none"
  :desc "Sets a spaceport module at specified slot"))
#("create_spaceport" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Creates a spaceport around planet"))
#("set_spaceport_level" 0 1
  (:kind "effect"
  :scopes "fleet planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Sets the level of the spaceport"))
#("switch" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Switches effect based on triggers"))
#("set_age" 0 1
  (:kind "effect"
  :scopes "leader"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Changes the age of the leader"))
#("create_wormhole_station" 0 1
  (:kind "effect"
  :scopes "star"
  :targets ""
  :desc "Creates a wormhole station"))
#("set_pop_faction" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets ""
  :desc "Makes a pop join a faction"))
#("create_pop_faction" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Creates a pop faction"))
#("add_support" 0 1
  (:kind "effect"
  :scopes ""
  :targets ""
  :desc "Adds to a pop factions Support level"))
#("set_support" 0 1
  (:kind "effect"
  :scopes ""
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Sets a pop factions Support level"))
#("set_graphical_culture" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Sets country graphical culture"))
#("set_formation_scale" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets ""
  :desc "Set formation scale on a fleet"))
#("set_controller" 0 1
  (:kind "effect"
  :scopes "fleet planet"
  :targets "none"
  :desc "Sets the controller of a planet"))
#("force_faction_evaluation" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets ""
  :desc "Forces a pop to evaluate factions"))
#("enable_faction_of_type" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Forces a country to evaluate potential factions of a specific type right now. this would otherwise occur once a month"))
#("clear_uncharted_space" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Clears US for country"))
#("every_owned_leader" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Switches Scope to and goes through all owned leader"))
#("random_owned_leader" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Picks a random owned leader"))
#("establish_communications" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Establish communications between empires."))
#("add_monthly_resource_mult" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Adds multiple amount of monthly income of resource to country"))
#("pop_faction_event" 0 1
  (:kind "effect"
  :scopes ""
  :targets ""
  :desc "Fires a Pop faction event"))
#("set_leader_flag" 0 1
  (:kind "effect"
  :scopes "leader"
  :targets ""
  :desc "Sets a flag on a leader"))
#("remove_leader_flag" 0 1
  (:kind "effect"
  :scopes "leader"
  :targets ""
  :desc "Removes a flag from a leader"))
#("add_research_option" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Gives a specific tech to an empire and makes it always available for research."))
#("load_parameters" 0 1
  (:kind "effect"
  :scopes "???"
  :targets "prevprev"
  :desc "Clears current parameters and loads new parameters from target"))
#("set_heir" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Change the country heir."))
#("set_pop_faction_flag" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets ""
  :desc "Sets a flag on a pop"))
#("remove_pop_faction_flag" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets ""
  :desc "Removes a flag from a pop"))
#("set_timed_pop_faction_flag" 0 1
  (:kind "effect"
  :scopes "pop"
  :targets ""
  :desc "Sets a timed flag on a pop faction"))
#("declare_white_peace_with" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Declare white peace with target country."))
#("leave_alliance" 0 1
  (:kind "effect"
  :scopes "country"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Leave any alliance/federation with country"))
#("create_sector" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Creates a sector"))
#("random_owned_pop" 0 1
  (:kind "effect"
  :scopes "country planet"
  :targets "none"
  :desc "Picks a random pop"))
#("set_policy" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Sets a policy to a specific value"))
#("recruitable" 0 1
  (:kind "effect"
  :scopes "leader"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Sets recruitable tag on leader."))
#("add_tech_progress" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Gives a specific modifier to a planet."))
#("closest_system" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Switches scope to closest system that passes limit"))
#("random_sector" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Executes on a random sector in the country"))
#("every_sector" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Executes on every sector in the country"))
#("random_owned_fleet" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Switches Scope to and goes through random owned fleet"))
#("random_ambient_object" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Executes effects on every ambient object that passes limit"))
#("random_system_ambient_object" 0 1
  (:kind "effect"
  :scopes "star"
  :targets ""
  :desc "Executes effects on every ambient object in system that passes limit"))
#("every_ambient_object" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Executes effects on every ambient object that passes limit"))
#("every_system_ambient_object" 0 1
  (:kind "effect"
  :scopes "star"
  :targets ""
  :desc "Executes effects on every ambient object in system that passes limit"))
#("set_ambient_object_flag" 0 1
  (:kind "effect"
  :scopes ""
  :targets ""
  :desc "Sets a flag on a AmbientObject"))
#("set_timed_ambient_object_flag" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets ""
  :desc "Sets a timed flag on a ambient object"))
#("remove_ambient_object_flag" 0 1
  (:kind "effect"
  :scopes ""
  :targets ""
  :desc "Removes a flag from a AmbientObject"))
#("every_fleet_in_system" 0 1
  (:kind "effect"
  :scopes "star"
  :targets ""
  :desc "Switches scope to and goes through all fleets in the system"))
#("random_fleet_in_system" 0 1
  (:kind "effect"
  :scopes "star"
  :targets ""
  :desc "Switches scope to a random fleet in system"))
#("set_aggro_range" 0 1
  (:kind "effect"
  :scopes "country fleet"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Sets aggro range on a fleet or a country"))
#("set_fleet_stance" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets ""
  :desc "Sets the stance of scope fleet. valid stances are aggressive, passive and evasive"))
#("set_aggro_range_measure_from" 0 1
  (:kind "effect"
  :scopes "country fleet"
  :targets ""
  :desc "Sets where aggro range is measured from on a fleet or a country. valid targets: self, return_point"))
#("set_ruined" 0 1
  (:kind "effect"
  :scopes ""
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Sets the ruined status of a building"))
#("random_neighbor_country" 0 1
  (:kind "effect"
  :scopes "???"
  :targets "this"
  :desc "Picks a random neighbor country"))
#("establish_communications_no_message" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Establish communications between empires."))
#("set_subject_of" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Sets the scope country's overlord to target"))
#("abort_special_project" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Aborts a special research project for a country"))
#("unassign_leader" 0 1
  (:kind "effect"
  :scopes "fleet leader planet ship"
  :targets "none"
  :desc "Unassigns a leader from scope"))
#("exile_leader_as" 0 1
  (:kind "effect"
  :scopes "country fleet"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Exiles a leader and saves him associated to a custom name"))
#("set_leader" 0 1
  (:kind "effect"
  :scopes "country fleet"
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Sets a leader from a previously exiled leader associated by a custom name"))
#("add_skill" 0 1
  (:kind "effect"
  :scopes "leader"
  :targets ""
  :desc "Adds amount of skill levels to scope leader"))
#("set_skill" 0 1
  (:kind "effect"
  :scopes "leader"
  :targets ""
  :desc "Sets skill levels to scope leader"))
#("every_neighbor_system" 0 1
  (:kind "effect"
  :scopes "star"
  :targets ""
  :desc "Executes on every neighboring system"))
#("random_neighbor_system" 0 1
  (:kind "effect"
  :scopes "star"
  :targets ""
  :desc "Executes on a random neighboring system"))
#("set_federation_leader" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Sets a country to lead a federation"))
#("add_colony_progress" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "capital controller from fromfrom leader none owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Add progress to a colony"))
#("start_colony" 0 1
  (:kind "effect"
  :scopes "planet"
  :targets "none"
  :desc "Starts a colony"))
#("remove_opinion_modifier" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Removes an opinion modifier to an empire."))
#("add_war_demand" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Adds a war demand to a rebel country"))
#("change_country_flag" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Changes the flag of a country"))
#("every_pop_faction" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Executes on every pop faction of country"))
#("random_pop_faction" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Executes on a random pop faction of country"))
#("kill_pop_faction" 0 1
  (:kind "effect"
  :scopes ""
  :targets "capital controller from fromfrom leader owner prev prevprev prevprevprev prevprevprevprev random root solar_system this"
  :desc "Deletes a pop faction"))
#("add_threat" 0 1
  (:kind "effect"
  :scopes "country planet"
  :targets "none"
  :desc "Adds threat"))
#("remove_sector" 0 1
  (:kind "effect"
  :scopes "country"
  :targets "prevprevprevprev"
  :desc "Removes a sector."))
#("set_mission" 0 1
  (:kind "effect"
  :scopes "fleet"
  :targets ""
  :desc "Sets the current mission of an observation station"))
#("remove_spaceport_module" 0 1
  (:kind "effect"
  :scopes "fleet planet"
  :targets "none"
  :desc "Removes a spaceport module from a spaceport. Argument is either a spaceport module slot number or a spaceport module tag"))
#("change_dominant_species" 0 1
  (:kind "effect"
  :scopes "country"
  :targets ""
  :desc "Changes the dominant species of the current Country"))
#("create_military_fleet" 0 1
  (:kind "effect"
  :scopes "???"
  :targets ""
  :desc "Creates a military fleet with the designs of a specified country."))
)

  )

(provide 'stellaris-list)
;;; paradox.el ends here
